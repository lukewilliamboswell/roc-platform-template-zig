/// This file was generated by roc using the following command.
///
/// ```sh
/// $ roc glue ZigGlue.roc src/ platform/main.roc
/// ```
const std = @import("std");
const builtin = @import("builtin");

// # NOTES TO HELP MANUALLY BUILD THIS FILE UNTIL ROC GLUE IS IMPLEMENTED
//
// ## all primitive types from our platform API
// I32, Str, {}
//
// ## all entrypoints from platform/main.roc
// - init_for_host! : {} => Str
// - run_for_host! : Str => I32
//
// ## all effects from platform/Effect.roc
// - stdout_line! : Str => {}
// - stdin_line! : {} => Str
//

// symbols implemented by roc in the `app.o` object file
// so internals of the roc runtime can be used by the host
// 1. (if required) pointer to effects struct
// 2. (if required) pointer to return value
// 3. (if required) pointer to each arg
extern fn roc__str_len(out: *u64, str: *RocStr) void;
extern fn roc__str_ptr(out: *?[*]u8, str: *RocStr) void;
extern fn roc__str_new(effects: *PlatformEffects, out: *RocStr, data: [*]const u8, len: *const u64) void;
extern fn roc__str_incref(str: *RocStr) void;
extern fn roc__str_decref(effects: *PlatformEffects, str: *RocStr) void;

// generated by ZigGlue and wraps the low-level implementations above
// to provide a nicer idomatic API for Zig
pub const RocStr = extern struct {

    // included to ensure size and alignment is correct for internal representation
    a: usize,
    b: usize,
    c: usize,

    pub const empty: RocStr = .{ .a = 0, .b = 0, .c = 0 };

    // Returns a slice of the utf-8 encoded string
    // helper generated by ZigGlue, uses `roc__str_as_slice` primitive exposed by roc
    pub fn asSlice(self: *RocStr) []const u8 {
        var ptr: ?[*]u8 = null;
        var len: u64 = 0;
        roc__str_ptr(&ptr, self);
        roc__str_len(&len, self);
        return ptr.?[0..len];
    }

    pub fn fromSlice(effects: *PlatformEffects, slice: []const u8) RocStr {
        var out = empty;
        const len = @as(u64, @intCast(slice.len));
        roc__str_new(effects, &out, slice.ptr, &len);
        return out;
    }

    pub fn incref(self: *RocStr) void {
        roc__str_incref(self);
    }

    pub fn decref(self: *RocStr, effects: *const PlatformEffects) void {
        roc__str_decref(effects, self);
    }
};

pub const PlatformEffects = extern struct {
    // 1. DATA STORE
    // store any state for the host, ie. the allocator might be required by an effect
    data: *anyopaque,

    // 2. ROC ALLOCATORS (in alphabetical order)

    // Allocators for roc to use
    roc_alloc: *const fn (effects: *PlatformEffects, size: usize, alignment: u32) callconv(.C) ?*anyopaque,
    roc_dealloc: *const fn (effects: *PlatformEffects, c_ptr: *anyopaque, alignment: u32) callconv(.C) void,
    roc_realloc: *const fn (effects: *PlatformEffects, c_ptr: *anyopaque, new_size: usize, old_size: usize, alignment: u32) callconv(.C) ?*anyopaque,

    // 3. ROC OTHER (in alphabetical order)

    // `dbg` was called
    roc_dbg: *const fn (effects: *PlatformEffects, loc: *RocStr, msg: *RocStr, src: *RocStr) callconv(.C) void,

    // `roc test` was ran and an expect failed, or an inline `expect` assertion failed
    roc_expect_failed: *const fn (effects: *PlatformEffects, loc: *RocStr, src: *RocStr, variables: *anyopaque) callconv(.C) void,

    // roc crashed in an unrecoverable way
    roc_panic: *const fn (effects: *PlatformEffects, msg: *RocStr, tag_id: u32) callconv(.C) void,

    // 4. PLATFORM EFFECTS (in alphabetical order)

    // the stdin_line! effect
    stdin_line: *const fn (effects: *PlatformEffects, ret: *RocStr) callconv(.C) void,
    // the stdout_line! effect
    stdout_line: *const fn (effects: *PlatformEffects, msg: *RocStr) callconv(.C) void,
};

// Calling into roc
// symbols implemented by roc in the `app.o` object file
pub extern fn roc__init_for_host(
    // 1. struct of function pointers
    effects: *const PlatformEffects,
    // 2. pointer for roc to write the return data
    out: *RocStr,
) callconv(.C) void;

pub extern fn roc__run_for_host(
    // 1. struct of function pointers
    effects: *const PlatformEffects,
    // 2. pointer for roc to write the return data
    out: *i32,
    // 3. pointer to each argument
    state: *RocStr,
) callconv(.C) void;
